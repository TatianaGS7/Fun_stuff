require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BlanksController do

  ## This should return the minimal set of attributes required to create a valid
  ## Blank. As you add validations to Blank, be sure to
  ## adjust the attributes here as well.
  #let(:valid_attributes) { { "type" => "1" } }
  #
  ## This should return the minimal set of values that should be in the session
  ## in order to pass any filters (e.g. authentication) defined in
  ## BlanksController. Be sure to keep this updated too.
  #let(:valid_session) { {} }
  #
  #describe "GET index" do
  #  it "assigns all blanks as @blanks" do
  #    blank = Blank.create! valid_attributes
  #    get :index, {}, valid_session
  #    assigns(:blanks).should eq([blank])
  #  end
  #end
  #
  #describe "GET show" do
  #  it "assigns the requested blank as @blank" do
  #    blank = Blank.create! valid_attributes
  #    get :show, {:id => blank.to_param}, valid_session
  #    assigns(:blank).should eq(blank)
  #  end
  #end
  #
  #describe "GET new" do
  #  it "assigns a new blank as @blank" do
  #    get :new, {}, valid_session
  #    assigns(:blank).should be_a_new(Blank)
  #  end
  #end
  #
  #describe "GET edit" do
  #  it "assigns the requested blank as @blank" do
  #    blank = Blank.create! valid_attributes
  #    get :edit, {:id => blank.to_param}, valid_session
  #    assigns(:blank).should eq(blank)
  #  end
  #end
  #
  #describe "POST create" do
  #  describe "with valid params" do
  #    it "creates a new Blank" do
  #      expect {
  #        post :create, {:blank => valid_attributes}, valid_session
  #      }.to change(Blank, :count).by(1)
  #    end
  #
  #    it "assigns a newly created blank as @blank" do
  #      post :create, {:blank => valid_attributes}, valid_session
  #      assigns(:blank).should be_a(Blank)
  #      assigns(:blank).should be_persisted
  #    end
  #
  #    it "redirects to the created blank" do
  #      post :create, {:blank => valid_attributes}, valid_session
  #      response.should redirect_to(Blank.last)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns a newly created but unsaved blank as @blank" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Blank.any_instance.stub(:save).and_return(false)
  #      post :create, {:blank => { "type" => "invalid value" }}, valid_session
  #      assigns(:blank).should be_a_new(Blank)
  #    end
  #
  #    it "re-renders the 'new' template" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Blank.any_instance.stub(:save).and_return(false)
  #      post :create, {:blank => { "type" => "invalid value" }}, valid_session
  #      response.should render_template("new")
  #    end
  #  end
  #end
  #
  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested blank" do
  #      blank = Blank.create! valid_attributes
  #      # Assuming there are no other blanks in the database, this
  #      # specifies that the Blank created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      Blank.any_instance.should_receive(:update).with({ "type" => "1" })
  #      put :update, {:id => blank.to_param, :blank => { "type" => "1" }}, valid_session
  #    end
  #
  #    it "assigns the requested blank as @blank" do
  #      blank = Blank.create! valid_attributes
  #      put :update, {:id => blank.to_param, :blank => valid_attributes}, valid_session
  #      assigns(:blank).should eq(blank)
  #    end
  #
  #    it "redirects to the blank" do
  #      blank = Blank.create! valid_attributes
  #      put :update, {:id => blank.to_param, :blank => valid_attributes}, valid_session
  #      response.should redirect_to(blank)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns the blank as @blank" do
  #      blank = Blank.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Blank.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => blank.to_param, :blank => { "type" => "invalid value" }}, valid_session
  #      assigns(:blank).should eq(blank)
  #    end
  #
  #    it "re-renders the 'edit' template" do
  #      blank = Blank.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Blank.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => blank.to_param, :blank => { "type" => "invalid value" }}, valid_session
  #      response.should render_template("edit")
  #    end
  #  end
  #end
  #
  #describe "DELETE destroy" do
  #  it "destroys the requested blank" do
  #    blank = Blank.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => blank.to_param}, valid_session
  #    }.to change(Blank, :count).by(-1)
  #  end
  #
  #  it "redirects to the blanks list" do
  #    blank = Blank.create! valid_attributes
  #    delete :destroy, {:id => blank.to_param}, valid_session
  #    response.should redirect_to(blanks_url)
  #  end
  #end

end
