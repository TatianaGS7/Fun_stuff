var An, Ak;      // начальная и конечная точки интервала времени между поступлением заявок
var Bn, Bk;      // начальная и конечная точки интервала времени между обработкой заявок
var N;               // кол-во заявок
var F = new Array(); // массив времени ожиданий до обработки заявки
var W = new Array(); // массив пребывания времени заявки в системе (Незавершенная работа)
var a = new Array(); // массив интервалов времени между заявками
var b = new Array(); // массив интервалов времени обработки заявок

function gen()
{
	// Забираем значения из полей формы
	N  = $('#Nt')[0].value;
	An = $('#Ant')[0].value;
	Ak = $('#Akt')[0].value;
	Bn = $('#Bnt')[0].value;
	Bk = $('#Bkt')[0].value;

    // обрабатываем значения с формы, выводим сообщения об ошибках
    if (N < 2)
        alert("Число заявок должно быть больше 2");
        
    if (An < 0 || Ak < 0 || Bn < 0 || Bk < 0)
        alert("Время не может быть отрицательным");

    if (parseInt(Ak) < parseInt(An) || parseInt(Bk) < parseInt(Bn))
        alert("Верхняя граница интервала не может быть меньше нижней");
    
    // задаем начальные значения
    for (var i=0; i < N; i++)
    {
        a[i] = generate(An, Ak);
        b[i] = generate(Bn, Bk);
    }
    
    F[0] = 0;
    W[0] = b[0];
	
    // расчет W и F
    for (var i=1; i < N; i++)
    {
        F[i] = (W[i-1] - a[i-1] > 0) ? W[i-1] - a[i-1] : 0; // max(W[i-1] - a, 0)
        W[i] = F[i] + b[i]; // незавершенная работа равна времени ожидания + время обработки
    }
    
    mTable();
    draw();
}

 // формируем таблицу
function mTable()
{
   
    var tbl = 
    "<table border='2px' cellspacing='0'>" +
    // названия столбцов
    "<tr>" + 
    "<th>Номер заявки, N </th>" +
    "<th>Интервал времени между заявками, a </th>" +
    "<th>Время обработки заявки, b </th>" +
    "<th>Время ожидания, F </th>" +
    "<th>Незавершенная работа, W </th>" +
    "</tr><tbody>";
    // значения таблицы
    for (var i=0; i < N; i++)
    {
        tbl +=
        "<tr>" +
        "<td>" + (i+1) + "</td>" +
        "<td>" + a[i].toFixed(1) + "</td>" +
        "<td>" + b[i].toFixed(1) + "</td>" +
        "<td>" + F[i].toFixed(1) + "</td>" +
        "<td>" + W[i].toFixed(1) + "</td>" +
        "</tr>";
    }
    tbl += "</tbody></table><br />";
    
    $('#table')[0].innerHTML = tbl;
}

//для графика
function draw()
{
    var tmp = new Array();
    var sum = 0;
    for (var i=0; i < N; i++)
    {
        // момент поступления новой заявки
        tmp.push( [sum, F[i]] ); //Метод push - добавления значений в массив
        tmp.push( [sum, W[i]] );
        // если остаточное время равно 0
        if (F[i+1] == 0)
            tmp.push([sum + b[i], 0]);
        sum += a[i];
    }
    // добавляем последнюю точку
    tmp.push([sum, 0]);
//Рисуем график
    $.plot($("#placeholder"),[
{
    data: tmp,
    label:"Изменения незавершенной работы во времени",
    points:{show:false},
    lines:{show: true, fill: false}
}
]);
}

// генератор равномерно распределенных СЧ на [H,K]
function generate(H, K)
{
    return parseInt(H) + Math.random() * (K-H);
}
//Функция parseInt преобразует первый аргумент в число 
// по указанному основанию, а если это невозможно - возвращает NaN.


